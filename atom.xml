<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gridea.drj.io</id>
    <title>Gridea</title>
    <updated>2021-06-24T01:53:55.504Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gridea.drj.io"/>
    <link rel="self" href="https://gridea.drj.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://gridea.drj.io/images/avatar.png</logo>
    <icon>https://gridea.drj.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[oracle19c 启动篇]]></title>
        <id>https://gridea.drj.io/post/oracle19c-qi-dong-pian/</id>
        <link href="https://gridea.drj.io/post/oracle19c-qi-dong-pian/">
        </link>
        <updated>2021-04-28T03:05:41.000Z</updated>
        <content type="html"><![CDATA[<p>启动19c的私人库db</p>
<h3 id=""></h3>
<p>准备启动监听，此时需要切换到安装oracle的用户目录下 ：</p>
<pre><code>su - oracle
</code></pre>
<h3 id="-2"></h3>
<p>登入oracle</p>
<pre><code>sqlplus /nolog
进行以sysdba 用户连接
connect /as sysdba;
启动实例
startup;
</code></pre>
<h3 id="-3"></h3>
<p>查看目前pdb 名称,选择session容器，再启动实例</p>
<pre><code>select pdb_id,pdb_name,dbid,status,creation_scn from dba_pdbs;
例如我虚拟机上oracle pdb 实例名是 pdb19
选择session 
alter session set container=pdb19;
启动实例
startup;
</code></pre>
<h3 id="-4"></h3>
<p>需要停掉oracle实例</p>
<pre><code>shutdown immediate;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[oracle 大数据准备]]></title>
        <id>https://gridea.drj.io/post/oracle-da-shu-ju-zhun-bei/</id>
        <link href="https://gridea.drj.io/post/oracle-da-shu-ju-zhun-bei/">
        </link>
        <updated>2021-04-21T06:08:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id=""></h3>
<p>准备测试的场景是，几百万数据量的一张表，更新表中几个字段的值，通过批量更新的方式</p>
<h3 id="-2"></h3>
<p>学习准备</p>
<ul>
<li>1.存储过程，模拟百万数据进行测试</li>
</ul>
<pre><code>一、存储过程
1.存储过程是用于特定操作的pl/sql语句块

2.存储过程是预编译过的，经优化后存储在sql内存中，使用时无需再次编译，提高了使用效率；

3.存储过程的代码直接存放在数据库中，一般直接通过存储过程的名称调用，减少了网络流量，加快了系统执行效率；

二、存储过程与函数的区别

1.一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。

2.对于存储过程来说可以返回参数(output)，而函数只能返回值或者表对象。

3.存储过程一般是作为一个独立的部分来执行，而函数可以作为查询语句的一个部分来调用，由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。

三、存储过程的优点

1.执行速度更快 – 在数据库中保存的存储过程语句都是编译过的

2.允许模块化程序设计 ，程序的可移植性更强– 类似方法的复用（使用存储过程可以实现存储过程设计和编码工作的分开进行，只要将存储过程名、参数、返回信息等告诉编程人员即可）；

3.提高系统安全性 – 防止SQL注入 （执行存储过程的用户要具有一定的权限才能使用存储过程）

4.减少网络流通量 – 只要传输存储过程的名称（在大批数据查询时使用存储过程分页查询比其他方式的分页要快很多）

5.在同时进行逐主、从表间的数据维护及有效性验证时，使用存储过程更加方便，可以有效的利用SQL中的事务处理机制　

四、存储过程的创建
Oracle存储过程包含三部分：过程声明，执行过程部分，存储过程异常。

(1) 创建：

CREATE [OR REPLACE] PROCEDURE procedure_name [(parameter1[model] datatype1, parameter2 [model] datatype2..)]
IS[AS]
BEGIN
PL/SQL;
END [procedure_name];

1. parameter用于指定参数，model用于指定参数模式，datatype用于指定参数类型

2. 定义存储过程的参数时，只能指定数据类型，不能指定数据长度

3. IS/AS用于开始PL/SQL代码块

4. 创建存储过程时，既可以指定参数也可以不指定任何参数；

5. 存储过程参数：1）输入参数 IN IN用于接收调用环境的输入参数（创建存储过程时，输入参数的IN可以省略）

6) 输出参数 OUT OUT用于将输出数据传递到调用环境

7) 输入输出参数（IN OUT）其中IN用于接收调用环境的输入参数，OUT用于将输出数据传递到调用环境

2)编译存储过程

ALTER PROCEDURE procedure_name COMPILE

3）调用存储过程（两种）

A）命令行：exec/execute procedure_name 

B）Sql窗口:

DECLARE
 param1 number;
 param2 VARCHAR2(10) := '~Hello~';
BEGIN
 procedure_name(param1, param2);
END;

4）删除存储过程

DROP PROCEDURE procedure_name;
</code></pre>
<p>上面就是存储过程的说明以及一些语法<br>
目前的准备模拟测试的多数据量的，只是偶尔使用，所以直接用函数就行</p>
<ul>
<li>2.PLSQL编程学习<br>
PL/SQL定义：<pre><code>PL/SQL是 Procedure Language &amp; Structured Query Language 的缩写。ORACLE的SQL是支
持ANSI(American national Standards Institute)和ISO92    (International    Standards 
Organization)标准的产品。PL/SQL是对SQL语言存储过程语言的扩展。从ORACLE6以后，ORACLE的
RDBMS附带了PL/SQL。它现在已经成为一种过程处理语言，简称PL/SQL。目前的PL/SQL包括两部分，
一部分是数据库引擎部分；另一部分是可嵌入到许多产品（如C语言，JAVA语言等）工具中的独立引擎。
可以将这两部分称为：数据库PL/SQL和工具PL/SQL。两者的编程非常相似。都具有编程结构、语法和逻
辑机制。工具PL/SQL另外还增加了用于支持工具（如ORACLE Forms）的句法。
</code></pre>
个人理解，就是进行部分逻辑运算、循环处理的函数编程</li>
</ul>
<p>针对这个特殊情况设计的的插入语句就是如下：</p>
<pre><code>declare 
sum_i int:=0;
i int:=0;
begin  
 loop 
 i:=i+1;
 insert into pdb_com_client(client_no,client_type,client_group,client_name,id_code,id_type,address) VALUES('1000001','1','5','test01','320381188304159867','0');
 exit when i=9999999;
 end loop;
 end;
</code></pre>
<p>进行插入百万条数据以上处理</p>
<h3 id="-3"></h3>
<p>数据处理完，就可以开始进行合并处理</p>
<ul>
<li>merge 语法<pre><code>merge into的形式：
  MERGE INTO [target-table] A USING [source-table sql] B ON([conditional expression] and [...]...)
   
  WHEN MATCHED THEN
   
  [UPDATE sql]
   
  WHEN NOT MATCHED THEN
   
  [INSERT sql]

</code></pre>
</li>
</ul>
<p>作用:判断Ｂ表和Ａ表是否满足ON中条件，如果满足则用B表去更新A表，如果不满足，则将B表数据插入A表但是有很多可选项，如下:<br>
1.正常模式</p>
<p>2.只update或者只insert</p>
<p>3.带条件的update或带条件的insert</p>
<p>4.全插入insert实现</p>
<p>5.带delete的update(觉得可以用3来实现)</p>
<pre><code>本例子：
</code></pre>
<p>merge into pdb_com_client a USING (select b.client_no,b.id_code from pdb_com_client_tmp b) c</p>
<p>ON(a.id_code=c.id_code)</p>
<p>when matched then</p>
<p>update SET a.client_no=c.client_no;</p>
<p>commit;</p>
<pre><code>

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spring 源码解析阅读]]></title>
        <id>https://gridea.drj.io/post/spring-yuan-ma-jie-xi-yue-du/</id>
        <link href="https://gridea.drj.io/post/spring-yuan-ma-jie-xi-yue-du/">
        </link>
        <updated>2021-04-21T02:59:15.000Z</updated>
        <summary type="html"><![CDATA[<p>###spring 源码 aspect.jar 包学习<br>
AOP的实现方式有两种：</p>
<pre><code> 1.  AOP框架在编译阶段，就对目标类进行修改，得到的class文件已经是被修改过的。生成静态的AOP代理类（生成*.class文件已经被改掉了，需要使用特定的编译器）。以AspectJ为代表 —— 静态AOP框架。
 2.  AOP框架在运行阶段，动态生成AOP代理（在内存中动态地生成AOP代理类），以实现对目标对象的增强。它不需要特殊的编译器。以Spring AOP为代表。—— 动态AOP框架。
</code></pre>
<p>动态AOP框架不需要在编译时对目标类进行增强，而是运行时生成目标类的代理类，该代理类要么与目标类实现相同的接口，要么是目标类的子类——总之，代理类的实例可作为目标类的实例来使用。一般来说，编译时增强的 AOP 框架在性能上更有优势——因为运行时动态增强的 AOP 框架需要每次运行时都进行动态增强。</p>
]]></summary>
        <content type="html"><![CDATA[<p>###spring 源码 aspect.jar 包学习<br>
AOP的实现方式有两种：</p>
<pre><code> 1.  AOP框架在编译阶段，就对目标类进行修改，得到的class文件已经是被修改过的。生成静态的AOP代理类（生成*.class文件已经被改掉了，需要使用特定的编译器）。以AspectJ为代表 —— 静态AOP框架。
 2.  AOP框架在运行阶段，动态生成AOP代理（在内存中动态地生成AOP代理类），以实现对目标对象的增强。它不需要特殊的编译器。以Spring AOP为代表。—— 动态AOP框架。
</code></pre>
<p>动态AOP框架不需要在编译时对目标类进行增强，而是运行时生成目标类的代理类，该代理类要么与目标类实现相同的接口，要么是目标类的子类——总之，代理类的实例可作为目标类的实例来使用。一般来说，编译时增强的 AOP 框架在性能上更有优势——因为运行时动态增强的 AOP 框架需要每次运行时都进行动态增强。</p>
<!-- more -->
<p>#####AspectJ</p>
<p>AspectJ 是一个基于 Java 语言的 AOP 框架，提供了强大的 AOP 功能，其他很多 AOP 框架都借鉴或采纳其中的一些思想。</p>
<p>AspectJ 是 Java 语言的一个 AOP 实现，其主要包括两个部分：第一个部分定义了如何表达、定义 AOP 编程中的语法规范，通过这套语言规范，我们可以方便地用 AOP 来解决 Java 语言中存在的交叉关注点问题；另一个部分是工具部分，包括编译器、调试工具等。</p>
<p>AspectJ 是最早、功能比较强大的 AOP 实现之一，对整套 AOP 机制都有较好的实现，很多其他语言的 AOP 实现，也借鉴或采纳了 AspectJ 中很多设计。在 Java 领域，AspectJ 中的很多语法结构基本上已成为 AOP 领域的标准。</p>
<pre><code>一、下载及安装

下载、安装 AspectJ 比较简单，读者登录 AspectJ 官网（http://www.eclipse.org/aspectj/downloads.php），

即可下载到一个可执行的 JAR 包，我下的是aspectj-1.8.13.jar，使用 java -jar aspectj-1.8.13.jar 命令，

多次单击“Next”按钮即可成功安装 AspectJ。

成功安装了 AspectJ 之后，将会在 C:\aspectj1.8 路径下（AspectJ 的安装路径）看到如下文件结构：

    bin：该路径下存放了 aj、aj5、ajc、ajdoc、ajbrowser 等命令，其中 ajc 命令最常用，它的作用类似于 javac，用于对普通 Java 类进行编译时增强。
    docs：该路径下存放了 AspectJ 的使用说明、参考手册、API 文档等文档。
    lib：该路径下的 4 个 JAR 文件是 AspectJ 的核心类库。
    相关授权文件。

环境变量配置

CLASSPATH:.;C:\aspectj1.8\lib\aspectjrt.jar;C:\aspectj1.8\lib\aspectjtools.jar

Path:C:\aspectj1.8\bin

测试是否安装成功用ajc命令：
</code></pre>
<p>二、AspectJ简单示例</p>
<p>实际上，AspectJ 的用法非常简单，就像我们使用 JDK 编译、运行 Java 程序一样。下面通过一个简单的程序来示范 AspectJ 的用法，并分析 AspectJ 如何在编译时进行增强。<br>
2.1、示例一：首先编写一个简单的 Java 类，这个 Java 类用于模拟一个业务组件。</p>
<p>清单 1.HelloWorld.java<br>
复制代码</p>
<pre><code> public class HelloWorld 
 { 
 // 定义一个简单方法，模拟应用中的业务逻辑方法
 public void sayHello()
   {
   System.out.println(&quot;Hello AspectJ!&quot;);
   }
 // 主方法，程序的入口
 public static void main(String[] args) 
 { 
 HelloWorld h = new HelloWorld(); 
 h.sayHello(); 
 } 
 } 
</code></pre>
<p>上面 Hello 类模拟了一个业务逻辑组件，编译、运行该 Java 程序，这个结果是没有任何悬念的，程序将在控制台打印“Hello AspectJ”字符串。</p>
<p>假设现在客户需要在执行 sayHello() 方法之前启动事务，当该方法执行结束时关闭事务，在传统编程模式下，我们必须手动修改 sayHello() 方法——如果改为使用 AspectJ，则可以无须修改上面的 sayHello() 方法。</p>
<p>下面我们定义一个特殊的 Java 类。</p>
<p>清单 2.TxAspect.java</p>
<pre><code>public aspect TxAspect 
 { 
 // 指定执行 HelloWorld.sayHello() 方法时执行下面代码块
 void around():call(void HelloWorld.sayHello())
 {
 System.out.println(&quot;开始事务 ...&quot;);
 proceed();
 System.out.println(&quot;事务结束 ...&quot;);
 }
 } 
</code></pre>
<p>可能读者已经发现了，上面类文件中不是使用 class、interface、enum 在定义 Java 类，而是使用了 aspect ——难道 Java 语言又新增了关键字？没有！上面的 TxAspect 根本不是一个 Java 类，所以 aspect 也不是 Java 支持的关键字，它只是 AspectJ 才能识别的关键字。</p>
<p>上面粗体字代码也不是方法，它只是指定当程序执行 Hello 对象的 sayHello() 方法时，系统将改为执行粗体字代码的花括号代码块，其中 proceed() 代表回调原来的 sayHello() 方法。</p>
<p>正如前面提到的，Java 无法识别 TxAspect.java 文件的内容，所以我们要使用 ajc.exe 命令来编译上面的 Java 程序。为了能在命令行使用 ajc.exe 命令，需要把 AspectJ 安装目录下的 bin 路径（比如 E:\Java\AOP\aspectj1.6\bin 目录）添加到系统的 PATH 环境变量中。接下来执行如下命令进行编译：</p>
<pre><code>D:\work\aspectjwork&gt;ajc -d . HelloWorld.java TxAspect.java
</code></pre>
<p>我们可以把 ajc.exe 理解成 javac.exe 命令，都用于编译 Java 程序，区别是 ajc.exe 命令可识别 AspectJ 的语法；从这个意义上看，我们可以将 ajc.exe 当成一个增强版的 javac.exe 命令。</p>
<p>运行该 HelloWorld 类依然无须任何改变。程序使用如下命令运行 HelloWorld类：</p>
<pre><code>java HelloWorld
</code></pre>
<p>运行该程序，将看到一个令人惊喜的结果：</p>
<pre><code>D:\work\aspectjwork&gt;java HelloWorld
开始事务 ...
Hello AspectJ!
事务结束 ...

D:\work\aspectjwork&gt;
</code></pre>
<p>从上面运行结果来看，我们完全可以不对 HelloWorld.java 类进行任何修改，同时又可以满足客户的需求：上面程序只是在控制台打印“开始事务 ...”、“结束事务 ...”来模拟了事务操作，实际上我们可用实际的事务操作代码来代替这两行简单的语句，这就可以满足客户需求了。<br>
2.2、示例二</p>
<p>如果客户再次提出新需求，需要在 sayHello() 方法后增加记录日志的功能，那也很简单，我们再定义一个 LogAspect，程序如下：</p>
<p>清单 3.LogAspect.java</p>
<pre><code>public aspect LogAspect 
 { 
 // 定义一个 PointCut，其名为 logPointcut 
 // 该 PointCut 对应于指定 HelloWorld 对象的 sayHello 方法
     pointcut logPointcut():execution(void HelloWorld.sayHello()); 
 // 在 logPointcut 之后执行下面代码块
     after():logPointcut() 
     { 
        System.out.println(&quot;记录日志 ...&quot;); 
     } 
 } 
</code></pre>
<p>上面程序的粗体字代码定义了一个 Pointcut：logPointcut - 等同于执行 Hello 对象的 sayHello() 方法，并指定在 logPointcut 之后执行简单的代码块，也就是说，在 sayHello() 方法之后执行指定代码块。使用如下命令来编译上面的 Java 程序：</p>
<pre><code>ajc -d . *.java
</code></pre>
<p>再次运行 HelloWorld 类，将看到如下运行结果：</p>
<pre><code>
D:\work\aspectjwork&gt;java HelloWorld
开始事务 ...
Hello AspectJ!
记录日志 ...
事务结束 ...

D:\work\aspectjwork&gt;
</code></pre>
<p>从上面运行结果来看，通过使用 AspectJ 提供的 AOP 支持，我们可以为 sayHello() 方法不断增加新功能。</p>
<p>为什么在对 HelloWorld 类没有任何修改的前提下，而 HelloWorld 类能不断地、动态增加新功能呢？这看上去并不符合 Java 基本语法规则啊。实际上我们可以使用 Java 的反编译工具来反编译前面程序生成的 HelloWorld.class 文件，发现 HelloWorld.class 文件的代码如下：</p>
<p>清单 4.HelloWorld.class</p>
<pre><code>
import java.io.PrintStream;
import org.aspectj.runtime.internal.AroundClosure;

public class HelloWorld
{
  public void sayHello()
  {
    try
    {
      System.out.println(&quot;Hello AspectJ!&quot;); } catch (Throwable localThrowable) {
      LogAspect.aspectOf().ajc$after$LogAspect$1$9fd5dd97(); throw localThrowable; } LogAspect.aspectOf().ajc$after$LogAspect$1$9fd5dd97();
  }

  public static void main(String[] args) {
    HelloWorld h = new HelloWorld();
    HelloWorld localHelloWorld1 = h; sayHello_aroundBody1$advice(localHelloWorld1, TxAspect.aspectOf(), null); } 
  private static final void sayHello_aroundBody0(HelloWorld paramHelloWorld) { paramHelloWorld.sayHello();
  }

  private static final void sayHello_aroundBody1$advice(HelloWorld target, TxAspect ajc$aspectInstance, AroundClosure ajc$aroundClosure)
  {
    System.out.println(&quot;开始事务 ...&quot;);
    AroundClosure localAroundClosure = ajc$aroundClosure;
    sayHello_aroundBody0(target);
    System.out.println(&quot;事务结束 ...&quot;);
  }
}
</code></pre>
<p>不难发现这个 HelloWorld.class 文件不是由原来的 HelloWorld.java 文件编译得到的，该 HelloWorld.class 里新增了很多内容——这表明 AspectJ 在编译时“自动”编译得到了一个新类，这个新类增强了原有的 HelloWorld.java 类的功能，因此 AspectJ 通常被称为编译时增强的 AOP 框架。</p>
<p>实际上，AspectJ 允许同时为多个方法添加新功能，只要我们定义 Pointcut 时指定匹配更多的方法即可。如下片段：</p>
<pre><code> pointcut xxxPointcut() 
	 :execution(void H*.say*()); 
</code></pre>
<p>上面程序中的 xxxPointcut 将可以匹配所有以 H 开头的类中、所有以 say 开头的方法，但该方法返回的必须是 void；如果不想匹配任意的返回值类型，则可将代码改为如下形式：</p>
<pre><code>pointcut xxxPointcut()

:execution(* H*.say*());
</code></pre>
<p>关于如何定义 AspectJ 中的 Aspect、Pointcut 等，读者可以参考 AspectJ 安装路径下的 doc 目录里的 quick5.pdf 文件。</p>
<p>此处是我自己验证时候出现的一个小问题：</p>
<pre><code>按照例子进行测试，结果带了包路径，执行结果未切入原来代码逻辑，所以测验这个jar包功能最好就是在管理台自己写两个文件玩玩，不要带包那种
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[oracle19c 安装准备篇]]></title>
        <id>https://gridea.drj.io/post/oracle19c-an-zhuang-zhun-bei-pian/</id>
        <link href="https://gridea.drj.io/post/oracle19c-an-zhuang-zhun-bei-pian/">
        </link>
        <updated>2021-04-20T08:28:35.000Z</updated>
        <content type="html"><![CDATA[<p>oracle19c 安装准备需要的相关安装包等</p>
<h3 id=""></h3>
<p>启动监听等命令</p>
<pre><code>1.su oracle 

然后启动监听器

2.lsnrctl start LISTENER
会看到启动成功的界面;

3.lsnrctl stop 
停止监听器命令.


4.lsnrctl status 
查看监听器命令.
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[本地虚拟机安装oracle19c，虚拟机安装篇 ]]></title>
        <id>https://gridea.drj.io/post/ben-di-xu-ni-ji-an-zhuang-oracle19cxu-ni-ji-an-zhuang-pian/</id>
        <link href="https://gridea.drj.io/post/ben-di-xu-ni-ji-an-zhuang-oracle19cxu-ni-ji-an-zhuang-pian/">
        </link>
        <updated>2021-04-20T06:30:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id=""></h3>
<p>本地安装虚拟机环境准备 win10 x64<br>
安装包版本 vm 客户端 ：VMware-workstation-full-16.1.1-17801498<br>
官网地址：https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html<br>
linux 镜像文件包： CentOS-7-x86_64-DVD-2009<br>
网易云镜像地址库：http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</p>
<h3 id="-2"></h3>
<p>第一步安装vm 客户端<br>
按照步骤一步一步安装，注意不要安装到c盘底下<img src="https://gridea.drj.io/post-images/1618901620635.png" alt="" loading="lazy"></p>
<h3 id="-3"></h3>
<p>第二步安装centos7 镜像文件：</p>
<ul>
<li>新建虚拟机 <img src="https://gridea.drj.io/post-images/1618901832268.png" alt="" loading="lazy"></li>
<li>选择镜像文件<br>
<img src="https://gridea.drj.io/post-images/1618902761099.png" alt="" loading="lazy"></li>
<li>设置登录linux 用户名、密码<br>
<img src="https://gridea.drj.io/post-images/1618902969735.png" alt="" loading="lazy"><br>
其他的按照步骤一步一步安装即可</li>
</ul>
<h3 id="-4"></h3>
<p>第三步 环境配置，虚拟机硬件配置等<br>
<img src="https://gridea.drj.io/post-images/1618904527261.png" alt="" loading="lazy"></p>
<h3 id="-5"></h3>
<p>第四步 ip地址固定</p>
<ul>
<li>
<p>根据当前虚拟机配置的网卡设备管理器查看当前虚拟机网卡ip地址等信息<img src="https://gridea.drj.io/post-images/1618905719464.png" alt="" loading="lazy"></p>
</li>
<li>
<p>查看当前网卡信息ip、子网掩码、网关等，记住不要保存，只是查看然后退出即可，记住网关等信息<br>
<img src="https://gridea.drj.io/post-images/1618906484097.png" alt="" loading="lazy"><br>
<img src="https://gridea.drj.io/post-images/1618906602972.png" alt="" loading="lazy"></p>
</li>
<li>
<p>物理机 此处指 安装虚拟的那台window系统电脑 进行网卡处理<br>
<img src="https://gridea.drj.io/post-images/1618906613339.png" alt="" loading="lazy"><br>
<img src="https://gridea.drj.io/post-images/1618906623066.png" alt="" loading="lazy"></p>
<ul>
<li>linux 系统中设置网关信息等</li>
</ul>
<p>查看本机ip地址</p>
</li>
</ul>
<p>1）.centos7开始用ip addr命令看ip地址，可以看出网卡名叫ifcfg-ens33,(截图前已自己配置过ip)</p>
<p>设定IP地址</p>
<p>1）.设定网卡的配置文件位置：/etc/sysconfig/network-scripts/ifcfg-ens33</p>
<p>2）.进入该目录，cd /etc/sysconfig/network-scripts/</p>
<p>3）.养成好习惯修改东西前先备份，cp ifcfg-ens33 ifcfg-ens33cpay</p>
<p>4）.vim ifcfg-ens33</p>
<pre><code>TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;  # 使用静态IP地址，默认为dhcp
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;46be3446-7c04-472b-8c46-c1102d7cbe52&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
IPADDR=&quot;192.168.31.100&quot; #ip地址
NETMASK=&quot;255.255.255.0&quot; #子网掩码
</code></pre>
<p>5）.重启网络服务</p>
<p>centos7重启服务已经换成了systemctl，老命令service network restart也是可以使用的。</p>
<p>我们使用新命令试试：systemctl restart network.service</p>
<p>值得注意的是，新命令不再有提示，没报错即成功。</p>
<p>6）,最后使用Ifconfig命令查询下ip地址</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 常用key命令]]></title>
        <id>https://gridea.drj.io/post/redis-chang-yong-key-ming-ling/</id>
        <link href="https://gridea.drj.io/post/redis-chang-yong-key-ming-ling/">
        </link>
        <updated>2021-04-12T07:59:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id=""></h3>
<p>查看所有key<br>
keys pattern</p>
<h3 id="-2"></h3>
<p>查看key的类型<br>
type key</p>
<h3 id="-3"></h3>
<p>随即返回一个key<br>
randomkey</p>
<h3 id="-4"></h3>
<p>删除key<br>
del key [key2 key3 key4 ...]</p>
<h3 id="-5"></h3>
<p>迭代指定pattern 的key<br>
返回 key 的列表：</p>
<pre><code>scan cursor [MATCH pattern]  [COUNT count]
</code></pre>
<pre><code>scan 0 match * count 1 
扫描 游标根据上次返回的 结果 ，0 表示一次遍历开始
最后以 0 返回表示，扫描一遍结束
</code></pre>
<h3 id="-6"></h3>
<p>判断key是否存在</p>
<p>返回状态1/0，True/False，当传入多个key时返回or的结果，即只要有一个存在就返回True：</p>
<pre><code>exists key [key ...]
</code></pre>
<h3 id="-7"></h3>
<p>序列化</p>
<pre><code>dump key
</code></pre>
<h3 id="-8"></h3>
<p>将 key 从当前db移动到另一个db中<br>
返回1/0 ，true/false</p>
<pre><code>move key db_index
</code></pre>
<h3 id="-9"></h3>
<p>重命名key</p>
<p>直接修改key的名称：</p>
<pre><code>rename key newkey
</code></pre>
<h3 id="-10"></h3>
<p>过期策略</p>
<p>给指定的 key 设置过期时间，以秒或unix timestamp为单位：</p>
<pre><code>    expire key seconds
    expireat key timestamp 
</code></pre>
<p>给指定的 key 设置过期时间，以毫秒或unix timestamp为单位：</p>
<pre><code>    pexpire key milliseconds
    pexpireat key milliseconds-timestamp 
    ttl key  查看 key 过期时间
</code></pre>
<h3 id="-11"></h3>
<p>移除 key 的过期时间，key 将持久保持：</p>
<pre><code>persist key
</code></pre>
<h3 id="-12"></h3>
<p>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)：</p>
<pre><code>ttl key
</code></pre>
<p>以毫秒为单位返回 key 的剩余生存时间：</p>
<pre><code>pttl key
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 数据类型  zset]]></title>
        <id>https://gridea.drj.io/post/redis-shu-ju-lei-xing-zset/</id>
        <link href="https://gridea.drj.io/post/redis-shu-ju-lei-xing-zset/">
        </link>
        <updated>2021-04-07T07:27:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id=""></h3>
<p>增加<br>
zadd 往有序集合中新增成员，需要指定该成员的分数，分数可以是整形或浮点型，当分数相同时候，索引下标按照字典排序：</p>
<pre><code>zadd key [NX|XX] [CH] [INCR] score member [score member ...]
 zadd myzset 0 a 1 b 
</code></pre>
<h3 id="-2"></h3>
<p>查找集合成员数<br>
zcard 获取有序集合的成员数：</p>
<pre><code>zcard key
</code></pre>
<h3 id="-3"></h3>
<p>获取指定分数区间的成员数<br>
zcount<br>
从有序集合内获取指定分数区间内的成员数:</p>
<pre><code>zcount key min max
</code></pre>
<h3 id="-4"></h3>
<p>根据字典排序返回min ,max之间的数据量<br>
zlexcount</p>
<pre><code>zlexcount key min max
1.根据字典数据范围返回区间内的集合元素
zlexcount myzset [xxx [zzz
2.根据下标 返回元素 
zlexcount myzset - +
</code></pre>
<h3 id="-5"></h3>
<p>zrange<br>
根据下标查看集合内所有成员（及分数），[start,stop]</p>
<pre><code>zrange key start stop [withscores]
</code></pre>
<h3 id="-6"></h3>
<p>zrangebylex<br>
根据字典区间返回有序集合的成员<br>
min:字典中排序位置较小的成员,必须以&quot;[&quot; 或者以&quot;(&quot;开头,可使用&quot;-&quot;代替， &quot;[&quot;代表闭区间，&quot;(&quot;代表开区间。<br>
max:字典中排序位置较大的成员,必须以&quot;[&quot; 或者以&quot;(&quot;开头,可使用&quot;+&quot;代替， &quot;[&quot;代表闭区间，&quot;(&quot;代表开区间。<br>
不要在分数不一致的SortSet集合中去使用 ZRANGEBYLEX 指令,因为获取的结果并不准确。<br>
limit offset count: 分片查询，limit为关键字，offset表示从结果集的哪个下标开始分片，count表示分片的数据量。</p>
<pre><code>zrangebylex key min max [LIMIT offset count]
</code></pre>
<h3 id="-7"></h3>
<p>zscore 返回有序集合，成员的分数值，不存在的成员返回空：</p>
<pre><code>zscore key member
</code></pre>
<h3 id="-8"></h3>
<p>zscan用于迭代有序集合中的元素（包括元素成员和元素分值）并将匹配到的值返回</p>
<pre><code>zscan key cursor [MATCH pattern] [COUNT count]
zscan myzsetZ 0 match *
</code></pre>
<h3 id="-9"></h3>
<p>zrangebyscore 根据分值查询，min ,max 区间元素，withscores 显示分值 ,limit 页数 count 展示数量，分页显示</p>
<pre><code>zrangebyscore key min max [withscores] [limit offset count]
</code></pre>
<h3 id="-10"></h3>
<p>zrank 返回有序集合中指定成员的索引（下标）</p>
<pre><code>zrank key member
</code></pre>
<h3 id="-11"></h3>
<p>zrevrange 将集合反序[reverse] 之后执行zrange 返回：</p>
<pre><code>zrevrange key start stop [withscores]
</code></pre>
<h3 id="-12"></h3>
<p>zrevrangebylex</p>
<p>结合zrangebylex和zrevrange功能。反序通过字典区间返回有序集合的成员：</p>
<pre><code>zrevrangebylex key max min [limit offset count]
</code></pre>
<h3 id="-13"></h3>
<p>zrevrangebyscore<br>
结合zrangebyscore和zrevrange功能。反序通过分数区间返回有序集合的成员</p>
<pre><code>zrevrangebyscore key max min [WITHSCORES] [LIMIT offset count]
</code></pre>
<h3 id="-14"></h3>
<p>zrevrank<br>
结合zrank和zrevrange功能。反序返回有序集合中指定成员的索引(下标)：</p>
<pre><code>zrevrank key  member
</code></pre>
<h3 id="-15"></h3>
<p>zpopmax</p>
<p>redis5版本之后的新功能。从集合中弹出分数最高的成员，返回该成员和分值，然后从集合中将其移出：</p>
<pre><code>zpopmax key [count]
</code></pre>
<p><img src="https://gridea.drj.io/post-images/1618193147085.png" alt="" loading="lazy"><br>
如果分值相同，就按照字典顺序弹出最大成员</p>
<h3 id="-16"></h3>
<p>zpopmin</p>
<p>redis5版本之后的新功能。与zpopmax相反，从集合中弹出分数最低的成员，返回该成员和分值，然后从集合中将其移出：</p>
<pre><code>zpopmin key [count]
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://gridea.drj.io/post-images/1618193772166.png" alt="" loading="lazy"></figure>
<h3 id="-17"></h3>
<p>bzpopmax</p>
<p>redis5版本之后的新功能。在参数中的所有有序集合均为空的情况下，阻塞连接。参数中包含多个有序集合时，按照参数中key的顺序，返回第一个非空key中分数最大的成员和对应的分数。参数 timeout 可以理解为客户端被阻塞的最大秒数值，0 表示永久阻塞。</p>
<pre><code>bzpopmax key [key ...] timeout
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://gridea.drj.io/post-images/1618197352571.jpg" alt="" loading="lazy"></figure>
<h3 id="-18"></h3>
<p>bzpopmin</p>
<p>redis5版本之后的新功能。与bzpopmax相反。在参数中的所有有序集合均为空的情况下，阻塞连接。参数中包含多个有序集合时，按照参数中key的顺序，返回第一个非空key中分数最小的成员和对应的分数。参数 timeout 可以理解为客户端被阻塞的最大秒数值，0 表示永久阻塞。</p>
<pre><code>bzpopmin key [key ...] timeout
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://gridea.drj.io/post-images/1618197656375.png" alt="" loading="lazy"></figure>
<h3 id="-19"></h3>
<p>删除zrem</p>
<p>从集合中移除指定的成员：</p>
<pre><code>zrem key member [member ...]
</code></pre>
<h3 id="-20"></h3>
<p>zremrangebylex</p>
<p>结合zrem和zrangebylex功能：将zrangebylex匹配的结果从有序集合中删除：</p>
<pre><code>zremrangebylex key  min max
</code></pre>
<pre><code>127.0.0.1:6379&gt; zremrangebylex mytestzset [china [csdn
1
127.0.0.1:6379&gt; zrange mytestzset 0 -1
hz
csdn
drj
op
ik
127.0.0.1:6379&gt; zremrangebylex mytestzset [china [csdn
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [hz  [csdn
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [c  [d
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [china [csdn
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [hz  [csdn
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [china +
5
127.0.0.1:6379&gt; zrange mytestzset 0 -1

127.0.0.1:6379&gt; zadd mytestzset 0 a 1 ab 2 bgh 3 cin 4 dso 5 efk 6 fhh
7
127.0.0.1:6379&gt; zremrangebylex mytestzset [a [dso
5
127.0.0.1:6379&gt; zrange mytestzset 0 -1
efk
fhh
127.0.0.1:6379&gt; zremrangebylex mytestzset [e [g
2
127.0.0.1:6379&gt; zadd mytestzset 0 china 1 hz 2 csdn 3 drj 4 op 5 ik 6 akk 7 bhhh
8
127.0.0.1:6379&gt; zrange mytestzset 0 -1
china
hz
csdn
drj
op
ik
akk
bhhh
127.0.0.1:6379&gt; zremrangebylex mytestzset [c [d
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [c [e
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [china [csdn
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [china [op
0
127.0.0.1:6379&gt; zremrangebylex mytestzset [china +
0
127.0.0.1:6379&gt; zrange mytestzset 0 -1
china
hz
csdn
drj
op
ik
akk
bhhh
127.0.0.1:6379&gt; zremrangebylex mytestzset [china +
0
127.0.0.1:6379&gt; zremrangebylex mytestzset -  +
8
127.0.0.1:6379&gt;
由此看出如果值 按照字母顺序是乱序，按照区间范围删除，最好是 指定删除开始 [ 到 + ，或者是指定结尾 - ] 
否则还是采用 下面这个命令
</code></pre>
<h3 id="-21"></h3>
<p>zremrangebyrank<br>
根据所选分值范围删除元素</p>
<pre><code>zremrangebyrank key start stop
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://gridea.drj.io/post-images/1618208723644.png" alt="" loading="lazy"></figure>
<h3 id="-22"></h3>
<p>zremrangebyscore</p>
<p>结合zrem和zrangebyscore功能：将zrangebyscore匹配的结果从有序集合中删除：</p>
<pre><code>zremrangebyscore key min max
</code></pre>
<pre><code>127.0.0.1:6379&gt; zadd mytestzset 0 china 1 hz 2 csdn 3 drj 4 op 5 ik 6 akk 7 bhhh 7 bpon 7 basd 7 bmnas 7 bfnm
8
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
china
0
hz
1
csdn
2
drj
3
op
4
ik
5
akk
6
basd
7
bfnm
7
bhhh
7
bmnas
7
bpon
7
127.0.0.1:6379&gt; zremrangebyrank mytestzset 0 8
9
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
bhhh
7
bmnas
7
bpon
7
127.0.0.1:6379&gt; zadd mytestzset 0 china 1 hz 2 csdn 3 drj 4 op 5 ik 6 akk 7 bhhh 7 bpon 7 basd 7 bmnas 7 bfnm
9
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
china
0
hz
1
csdn
2
drj
3
op
4
ik
5
akk
6
basd
7
bfnm
7
bhhh
7
bmnas
7
bpon
7
127.0.0.1:6379&gt; zremrangebyscore mytestzset 0 7
12
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
根据分值删除可以将所有元素删除
</code></pre>
<h3 id="-23"></h3>
<p>改<br>
zincrby</p>
<p>修改有序集合内成员的分数，将有序集合内成员的分数增加increment分值，increment可以为浮点型整型也可以为负数或正数：</p>
<pre><code>zincrby key increment member 
</code></pre>
<pre><code>127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
china
0
hz
1
csdn
2
drj
3
op
4
ik
5
akk
6
basd
7
bfnm
7
bhhh
7
bmnas
7
bpon
7
127.0.0.1:6379&gt; zremrangebyscore mytestzset 0 7
12
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores

127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores

127.0.0.1:6379&gt; zadd mytestzset 0 china 1 hz 2 csdn 3 drj 4 op 5 ik 6 akk 7 bhhh 7 bpon 7 basd 7 bmnas 7 bfnm
12
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
china
0
hz
1
csdn
2
drj
3
op
4
ik
5
akk
6
basd
7
bfnm
7
bhhh
7
bmnas
7
bpon
7
127.0.0.1:6379&gt; zincrby mytestzset 1783.09 china
1783.0899999999999
127.0.0.1:6379&gt; zrange mytestzset 0 -1 withscores
hz
1
csdn
2
drj
3
op
4
ik
5
akk
6
basd
7
bfnm
7
bhhh
7
bmnas
7
bpon
7
china
1783.0899999999999
127.0.0.1:6379&gt; zincrby mytestzset 1783.5 china
3566.5900000000001
127.0.0.1:6379&gt; zincrby mytestzset -1783.5 china
1783.0900000000001
127.0.0.1:6379&gt; zincrby mytestzset -1783.5 china
-0.40999999999985448
127.0.0.1:6379&gt; zincrby mytestzset -0.05 china
-0.45999999999985447
127.0.0.1:6379&gt; zincrby mytestzset -0.5 china
-0.95999999999985453
127.0.0.1:6379&gt; zincrby mytestzset -0.05 china
-1.0099999999998546

可以发现浮点类型分值两位也有问题 ，所以分值最多加一位小数即可
</code></pre>
<h3 id="-24"></h3>
<p>交集<br>
zinterstore</p>
<p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination ，默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和，可以使用aggregate参数指定将相同成员的分数取最小值或最大值：</p>
<pre><code>zinterstore destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
</code></pre>
<pre><code>127.0.0.1:6379&gt; zadd myzset0 0 drj 1 csdn 2 mail
3
127.0.0.1:6379&gt; zadd myzset1 12 drj 13 csdn 24 op
1
127.0.0.1:6379&gt; zrange myzset1 0 -1 withscores
-1
0
rick
2
roll
2
china
4
it
5
drj
12
csdn
13
op
24
127.0.0.1:6379&gt; zinterstore myzset0_inter_myzset1 2 myzset0 myzset1 aggregate min
2
127.0.0.1:6379&gt; zrange myzset0_inter_myzset1 0 -1 withscores
drj
0
csdn
1
127.0.0.1:6379&gt; zinterstore myzset0_inter_myzset1 2 myzset0 myzset1 aggregate max
2
127.0.0.1:6379&gt; zrange myzset0_inter_myzset1 0 -1 withscores
drj
12
csdn
13
127.0.0.1:6379&gt; zinterstore myzset0_inter_myzset1 2 myzset0 myzset1
2
127.0.0.1:6379&gt; zrange myzset0_inter_myzset1 0 -1 withscores
drj
12
csdn
14

aggregate min 取集合中相同成员分值最低的保存到新的集合分值中
aggregate max 取集合中相同成员分值最高的保存到新的集合分值中

</code></pre>
<h3 id="-25"></h3>
<p>并集<br>
zunionstore</p>
<p>计算给定的一个或多个有序集的并集，并存储在新的 key 中：</p>
<pre><code>zunionstore destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
</code></pre>
<pre><code>127.0.0.1:6379&gt; zrange myzset0 0 -1 withscores
drj
0
csdn
1
mail
2
127.0.0.1:6379&gt; zrange myzset1 0 -1 withscores
-1
0
rick
2
roll
2
china
4
it
5
drj
12
csdn
13
op
24
127.0.0.1:6379&gt; zunionstore myzset0_union_myzset1 2 myzset0 myzset1
9
127.0.0.1:6379&gt; zrange myzset0_union_myzset1 0 -1 withscores
-1
0
mail
2
rick
2
roll
2
china
4
it
5
drj
12
csdn
14
op
24

</code></pre>
<p>应用场景</p>
<pre><code>点赞排行
排行榜
显示分数和信息(如学生分数排名)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 数据结构 set]]></title>
        <id>https://gridea.drj.io/post/redis-shu-ju-jie-gou-set/</id>
        <link href="https://gridea.drj.io/post/redis-shu-ju-jie-gou-set/">
        </link>
        <updated>2021-04-07T01:41:36.000Z</updated>
        <content type="html"><![CDATA[<p>增加元素<br>
可以增加若干个元素的set 集合</p>
<pre><code> SADD key member [member ...]
  summary: Add one or more members to a set
  since: 1.0.0
</code></pre>
<p>获取集合中元素的数量</p>
<pre><code>  SCARD key
  summary: Get the number of members in a set
  since: 1.0.0
</code></pre>
<p>获取差集<br>
对比多个集合的差集，返回左侧集合中，其他集合中没有的元素 有点像是<br>
(A-A∩B...C) 取集合A中和其他集合相交部分的元素后的差集</p>
<pre><code>sdiff key [key ...]
summary: Subtract multiple sets
since: 1.0.0
</code></pre>
<p>获取差集，并且保存到一个新的集合中（主要还是A集合为主）</p>
<pre><code>  sdiffstore destination key [key ...]
  summary: Subtract multiple sets and store the resulting set in a key
  since: 1.0.0
</code></pre>
<p>获取多个集合交集部分的元素</p>
<pre><code>sinter key [key ...]
summary: Intersect multiple sets
since: 1.0.0
</code></pre>
<p>获取多个集合交易部分的元素并且保存到一个新的集合中</p>
<pre><code>sinterstore destination key [key ...]
summary: Intersect multiple sets and store the resulting set in a key
since: 1.0.0
</code></pre>
<p>查看集合中是否包含该元素</p>
<pre><code>  SISMEMBER key member
  summary: Determine if a given value is a member of a set
  since: 1.0.0
</code></pre>
<p>查看集合中元素</p>
<pre><code> smembers key
 summary: Get all the members in a set
 since: 1.0.0
</code></pre>
<p>将元素从原来的集合中转移到 目标集合中</p>
<pre><code>  smove source destination member
  summary: Move a member from one set to another
  since: 1.0.0
</code></pre>
<p>随机弹出 count 个元素</p>
<pre><code>spop key [count]
summary: Remove and return one or multiple random members from a set
since: 1.0.0
</code></pre>
<p>随机获取 count 数量个元素</p>
<pre><code>srandmenber key [count]
summary: Get one or multiple random members from a set
since: 1.0.0
</code></pre>
<p>从集合中删除 一个或者多个指定元素</p>
<pre><code>  srem key member [member ...]
  summary: Remove one or more members from a set
  since: 1.0.0
</code></pre>
<p>sscan 返回匹配 pattern 的 count 数量的元素</p>
<p>只有两种游标是合法的：</p>
<pre><code>在开始一个新的迭代时， 游标必须为 0 。
增量式迭代命令在执行之后返回的， 用于延续（continue）迭代过程的游标。
</code></pre>
<pre><code> sscan key cursor [MATCH pattern] [COUNT count]
 summary: Incrementally iterate Set elements
 since: 2.8.0
 sscan myset0 0 match  n*
</code></pre>
<p>取多个集合的并集，重复的会被去重</p>
<pre><code>  sunion key [key ...]
  summary: Add multiple sets
  since: 1.0.0
</code></pre>
<p>取多个集合的并集，去重后，保存为一个新的集合</p>
<pre><code>  sunionstore destination key [key ...]
  summary: Add multiple sets and store the resulting set in a key
  since: 1.0.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 数据结构 list  ]]></title>
        <id>https://gridea.drj.io/post/redis-shu-ju-jie-gou-list/</id>
        <link href="https://gridea.drj.io/post/redis-shu-ju-jie-gou-list/">
        </link>
        <updated>2021-04-06T07:04:49.000Z</updated>
        <content type="html"><![CDATA[<p>###help 查看相关命令手册</p>
<pre><code>help @list
</code></pre>
<p>查看元素</p>
<pre><code> lrange key start stop
</code></pre>
<p>增加<br>
lpush 从左边插入元素，从左边一次追加入栈，先进后出，后进先出</p>
<pre><code>lpush key element [element ...]
</code></pre>
<p>rpush<br>
从右边插入元素，从右边开始追加到列表中，先进先出 ，后进后出</p>
<pre><code>rpush key element [element ...]
</code></pre>
<p>lpushx<br>
与 string 类型中的nx 类似，只有当list 存在时候才会从左边开始追加元素入栈：</p>
<pre><code>lpushx key element [element ...]
</code></pre>
<p>rpushx<br>
与string 类型中的nx 类似，只有当list 存在时候才会从右边开始追加元素入栈：</p>
<pre><code>rpushx key element [element ...]
</code></pre>
<p>linsert<br>
从 list 中指定的元素 前/后插入一个新元素:</p>
<pre><code>linsert key before|after pivot element
</code></pre>
<p>删<br>
lrem<br>
从列表左侧开始移除count 个 指定的元素 ，返回删除的元素个数</p>
<pre><code>lrem key count element
</code></pre>
<p>改<br>
lset<br>
根据下标修改元素内容，下标是从 左边算起，以 0 开始：</p>
<pre><code>lset  key index element
</code></pre>
<p>截取<br>
ltrim<br>
将原来列表截取为从下标 start 到下标 stop 闭区间的列表，即原有列表变为一个从第 start+1 到 第stop+1 个元素的列表：</p>
<pre><code>ltrim key start stop
</code></pre>
<p>查<br>
llen<br>
查看列表中元素的个数</p>
<pre><code>llen key
</code></pre>
<p>lrange</p>
<p>根据起止下标查询列表元素，负数表示从后往前，跟python里一样：</p>
<pre><code>    lrange key start stop
     
    lrange key 0 -1 #表示查看全部元素
    lrange key -1 -1 #表示查看最右边的元素
</code></pre>
<p>lindex</p>
<p>根据指定的index下标查看列表中的元素，下标从0开始：</p>
<pre><code>lindex key index
</code></pre>
<p>lpop</p>
<p>从左边消费列表中的元素，消费完之后从列表中删除：</p>
<pre><code>lpop key
</code></pre>
<p>rpop</p>
<p>从右边消费列表中的元素，消费完之后从列表中删除：</p>
<pre><code>rpop key
</code></pre>
<p>rpoplpush</p>
<p>消费列表A的最右边的元素返回，然后追加到列表B的最左边：</p>
<pre><code>    rpoplpush source destination
    rpoplpush List_A List_B
</code></pre>
<p>blpop</p>
<p>从列表中左侧查询元素，返回列表的key和左侧第一个元素，若所有查询的列表中都没有元素，则会阻塞等待至设置的timeout秒之后返回空，若在这期间，这些列表新增了元素，则会立刻消费并返回该元素：</p>
<pre><code>blpop key [key ...] timeout
</code></pre>
<p>brpop</p>
<p>与blpop类似，区别是brpop从右侧消费：</p>
<pre><code>brpop key [key ...] timeout
</code></pre>
<p>brpoplpush</p>
<p>结合brpop和lpush，阻塞消费并将消费到的元素添加至target列表的最左侧：</p>
<pre><code>brpoplpush source destination timeout
</code></pre>
<p>应用<br>
栈：先进后出</p>
<p>lpush + lpop<br>
lpush 将新进的元素放到列表左侧，lpop 从左侧第一个元素出栈</p>
<p>队列：先进先出<br>
lpush + rpop<br>
将新进的元素放到左侧，然后从右侧出栈之前的元素</p>
<p>有限集合<br>
lpush + ltrim<br>
将新进的元素往左侧追加，截取固定下标的元素，重新生成新的列表</p>
<p>消息队列<br>
lpush + brpop<br>
新元素追加到左侧，查看超时时间，从右侧出栈</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 数据类型之字符串 String]]></title>
        <id>https://gridea.drj.io/post/redis-shu-ju-lei-xing-zhi-zi-fu-chuan-string/</id>
        <link href="https://gridea.drj.io/post/redis-shu-ju-lei-xing-zhi-zi-fu-chuan-string/">
        </link>
        <updated>2021-04-01T05:58:58.000Z</updated>
        <content type="html"><![CDATA[<p>###命令行模式<br>
进入命令行模式：</p>
<pre><code>redis_cli -a password  --raw
--raw 防止乱码
</code></pre>
<h3 id="help">help</h3>
<p>使用下面命令查看手册：<br>
help @string</p>
<p>###exists</p>
<p>查看key是否存在，返回true / false, 1/0</p>
<p>exists key</p>
<p>###增加<br>
set</p>
<p>set,setex,psetex,setnx</p>
<pre><code>#ex为多少秒过期 px为多少毫秒过期，nx为若不存在才创建，xx为若存在才覆盖创建
set key value [ex seconds] [px milliseconds] [nx|xx]
</code></pre>
<p>使用set命令新增一个键值对，EX,PX用法：</p>
<pre><code>127.0.0.1:6379&gt; set name 
OK
127.0.0.1:6379&gt; get name
&quot;\xe7\x8e\x8b\xe4\xb9\x89\xe5\x87\xaf&quot;   
127.0.0.1:6379&gt; set name di,renjie
OK
127.0.0.1:6379&gt; get name
&quot;wang,yikai&quot;
127.0.0.1:6379&gt; set name_ex drj ex 10
OK
127.0.0.1:6379&gt; ttl name_ex
(integer) 2
127.0.0.1:6379&gt; ttl name_ex
(integer) -2
127.0.0.1:6379&gt; get name_ex
(nil)
127.0.0.1:6379&gt; set name_px drj px 10000
OK
127.0.0.1:6379&gt; ttl name_px
(integer) 4
127.0.0.1:6379&gt; ttl name_px
(integer) 0
127.0.0.1:6379&gt; get name_px
(nil)
127.0.0.1:6379&gt; setex name_ex 10 drj
OK
127.0.0.1:6379&gt; ttl name_ex
(integer) 3
127.0.0.1:6379&gt; ttl name_ex
(integer) 0
127.0.0.1:6379&gt; get name_ex
(nil)
127.0.0.1:6379&gt; psetex name_px 10000 drj
OK
127.0.0.1:6379&gt; ttl name_px
(integer) 3
127.0.0.1:6379&gt; ttl name_px
(integer) -2
127.0.0.1:6379&gt; get name_px
(nil)
</code></pre>
<p>SET中 NX,XX用法：</p>
<pre><code>127.0.0.1:6379&gt; set name_csdn drj
OK
127.0.0.1:6379&gt; get name_csdn
&quot;drj&quot;
127.0.0.1:6379&gt; set name_csdn drj2
OK
127.0.0.1:6379&gt; get name_csdn
&quot;drj2&quot;
127.0.0.1:6379&gt; set name_nx drj nx
OK
127.0.0.1:6379&gt; get name_nx
&quot;drj&quot;
127.0.0.1:6379&gt; set name_nx drj2 nx
(nil)
127.0.0.1:6379&gt; get name_nx
&quot;drj&quot;
127.0.0.1:6379&gt; setnx name_nx drj2
(integer) 0
127.0.0.1:6379&gt; get name_nx
&quot;drj&quot;
127.0.0.1:6379&gt; set name_xx drj xx
(nil)
127.0.0.1:6379&gt; get name_xx
(nil)
127.0.0.1:6379&gt; set name_xx drj
OK
127.0.0.1:6379&gt; get name_xx
&quot;drj&quot;
127.0.0.1:6379&gt; set name_xx drj2 xx
OK
127.0.0.1:6379&gt; get name_xx
&quot;drj2&quot;
</code></pre>
<p>mset</p>
<p>mset,msetnx</p>
<p>同时定义多个键值对,mset也可以和nx一起用：</p>
<pre><code>mset key1 value1 [key2 value2...] #批量创建kv，已存在的会被更新
msetnx key1 value1 [key2 value2...] #批量创建kv，所有key不存在才会创建

127.0.0.1:6379&gt; mset k1 a k2 b k3 c
OK
127.0.0.1:6379&gt; mget k1 k2 k3
1) &quot;a&quot;
2) &quot;b&quot;
3) &quot;c&quot;
</code></pre>
<p>删<br>
del</p>
<p>使用del命令删除数据，可批量可单个删除：</p>
<p>del key1 [key2 key3...]</p>
<pre><code>127.0.0.1:6379&gt; del k1 k2 k3
(integer) 3
127.0.0.1:6379&gt; del name_xx
(integer) 1
127.0.0.1:6379&gt; mget k1 k2 k3 name_xx name_nx
1) (nil)
2) (nil)
3) (nil)
4) (nil)
5) &quot;drj&quot;
</code></pre>
<p>改<br>
set</p>
<p>上面set中介绍了，如果对同一个key进行set即可更新该数据：</p>
<pre><code>127.0.0.1:6379&gt; set email drj@csdn.com
OK
127.0.0.1:6379&gt; get email
&quot;drj@csdn.com&quot;
127.0.0.1:6379&gt; set email rick@csdn.com
OK
127.0.0.1:6379&gt; get email
&quot;rick@csdn.com&quot;
</code></pre>
<p>getset</p>
<p>等同于get+set，执行此命令返回get的结果，然后将该key更新为新的value，下次再get的时候查到的就是新的value：</p>
<pre><code>getset key new_value
&gt;&gt;old_value
get key
&gt;&gt;new_value
</code></pre>
<p>setrange</p>
<p>对指定下标的字符串进行更新，下标从0开始算起：</p>
<p>setrange key offeset value</p>
<p>查<br>
keys</p>
<p>查看所有的key</p>
<p>keys *</p>
<p>get</p>
<p>使用get获得指定key的value</p>
<p>get key</p>
<p>mget</p>
<p>使用mget批量获得指定keys的values</p>
<p>mget key1 [key2 key3...]</p>
<p>getrange</p>
<p>从字符串的指定开始结束下标截取字符串返回，下标从0开始算起：</p>
<p>getrange key start end</p>
<p>计数<br>
incr</p>
<p>对指定的key的value加1，递增步长默认1，如果key不存在，其初始值为0，在incr之后其值为1，如果value的值不能转为整型，如hello，该操作将执行失败并返回相应的错误信息：</p>
<p>incr key</p>
<p>decr</p>
<p>对指定的key的value减1，递减步长默认1，如果key不存在，其初始值为0，在decr之后其值为-1，如果value的值不能转为整型，如hello，该操作将执行失败并返回相应的错误信息：</p>
<p>decr key</p>
<p>incrby</p>
<p>对指定的key的value加指定的步长，递增步长可指定，如果key不存在，其初始值为0，在incrby之后其值为步长，如果value的值不能转为整型，如hello，该操作将执行失败并返回相应的错误信息：</p>
<pre><code>#步长increment为整数，当为负数时效果等于递减
incrby key increment
</code></pre>
<p>decrby</p>
<p>对指定的key的value减指定的步长，递减步长可指定，如果key不存在，其初始值为0，在decrby之后其值为步长的负数，如果value的值不能转为整型，如hello，该操作将执行失败并返回相应的错误信息：</p>
<pre><code>#步长increment为整数，当为负数时效果等于递増
decrby key increment
</code></pre>
<p>incrbyfloat<br>
效果与incrby类似，此方法支持传浮点型的值，正数为增，负数为减</p>
<p>追加<br>
append</p>
<p>在字符串最后面追加子串：</p>
<p>append key value</p>
<p>长度<br>
strlen</p>
<p>返回字符串的长度：</p>
<p>strlen key</p>
]]></content>
    </entry>
</feed>